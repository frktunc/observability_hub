/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Common base schema for all observability events
 */
export interface BaseEventSchema {
    /**
     * Unique identifier for this event
     */
    eventId: string;
    /**
     * Event type in format: domain.entity.action (e.g., log.message.created)
     */
    eventType: string;
    /**
     * Schema version (semantic versioning)
     */
    version: string;
    /**
     * RFC 3339 timestamp when the event occurred
     */
    timestamp: string;
    /**
     * Correlation ID for tracking related events across services
     */
    correlationId: string;
    /**
     * ID of the event that caused this event (for event sourcing)
     */
    causationId?: string;
    source: {
        /**
         * Name of the service that generated this event
         */
        service: string;
        /**
         * Version of the service
         */
        version: string;
        /**
         * Instance ID or hostname
         */
        instance?: string;
        /**
         * Geographic region or datacenter
         */
        region?: string;
    };
    tracing?: {
        /**
         * Distributed tracing trace ID (16 or 32 hex chars)
         */
        traceId: string;
        /**
         * Distributed tracing span ID (16 hex chars)
         */
        spanId?: string;
        /**
         * Parent span ID
         */
        parentSpanId?: string;
        /**
         * Tracing flags (sampled, debug, etc.)
         */
        flags?: number;
        /**
         * Tracing baggage key-value pairs
         */
        baggage?: {
            [k: string]: string;
        };
    };
    metadata: {
        /**
         * Event processing priority
         */
        priority: "critical" | "high" | "normal" | "low";
        /**
         * Searchable tags for categorization
         */
        tags?: string[];
        /**
         * Environment where the event originated
         */
        environment?: "production" | "staging" | "development" | "testing";
        /**
         * Number of retry attempts for this event
         */
        retryCount?: number;
        /**
         * URL to the schema definition
         */
        schemaUrl?: string;
        [k: string]: unknown;
    };
}
//# sourceMappingURL=base-event.types.d.ts.map