import type { LoggerConfig } from './logger/types';
import type { RedisConfig } from './redis';
import { ObservabilityLogger } from './logger/logger';
export { initTracer } from './tracing';
export { ObservabilityLogger } from './logger/logger';
export type { LoggerConfig, LogLevel, LogContext, BusinessEvent, LogMessage } from './logger/types';
export { createObservabilityConfigSchema, createDerivedConfig } from './config';
export { RedisClient, createRedisClient, createRedisService } from './redis';
export { createHealthCheckHandler, createReadinessCheckHandler } from './health';
export type { DependencyHealth, HealthCheckResult, DatabaseService, RedisService as HealthRedisService, RateLimitService } from './health';
export type ObservabilityConfig = {
    serviceName: string;
    serviceVersion: string;
    environment: 'development' | 'staging' | 'production';
    logger: LoggerConfig;
    redis: RedisConfig;
    circuitBreaker: {
        enabled: boolean;
        timeout: number;
        errorThreshold: number;
        resetTimeout: number;
    };
};
export declare const createObservabilitySetup: (serviceName: string, config?: Partial<ObservabilityConfig>) => {
    logger: ObservabilityLogger;
    redis: {
        getRedisClient: () => import("./redis").RedisClient;
        initializeRedis: () => Promise<import("./redis").RedisClient>;
        closeRedis: () => Promise<void>;
    } | null;
    healthCheck: () => Promise<import("./health").HealthCheckResult>;
    config: import("zod").ZodObject<{
        NODE_ENV: import("zod").ZodDefault<import("zod").ZodEnum<["development", "staging", "production"]>>;
        PORT: import("zod").ZodDefault<import("zod").ZodNumber>;
        HOST: import("zod").ZodDefault<import("zod").ZodString>;
        SERVICE_NAME: import("zod").ZodDefault<import("zod").ZodString>;
        SERVICE_VERSION: import("zod").ZodDefault<import("zod").ZodString>;
        SERVICE_INSTANCE_ID: import("zod").ZodOptional<import("zod").ZodString>;
        DATABASE_URL: import("zod").ZodString;
        DATABASE_HOST: import("zod").ZodString;
        DATABASE_PORT: import("zod").ZodDefault<import("zod").ZodNumber>;
        DATABASE_NAME: import("zod").ZodString;
        DATABASE_USER: import("zod").ZodString;
        DATABASE_PASSWORD: import("zod").ZodString;
        DATABASE_POOL_MIN: import("zod").ZodDefault<import("zod").ZodNumber>;
        DATABASE_POOL_MAX: import("zod").ZodDefault<import("zod").ZodNumber>;
        DATABASE_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        RABBITMQ_URL: import("zod").ZodDefault<import("zod").ZodString>;
        RABBITMQ_HOSTNAME: import("zod").ZodDefault<import("zod").ZodString>;
        RABBITMQ_PORT: import("zod").ZodDefault<import("zod").ZodNumber>;
        RABBITMQ_USER: import("zod").ZodDefault<import("zod").ZodString>;
        RABBITMQ_PASSWORD: import("zod").ZodDefault<import("zod").ZodString>;
        RABBITMQ_VHOST: import("zod").ZodDefault<import("zod").ZodString>;
        RABBITMQ_EXCHANGE: import("zod").ZodDefault<import("zod").ZodString>;
        RABBITMQ_CONNECTION_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        RABBITMQ_HEARTBEAT: import("zod").ZodDefault<import("zod").ZodNumber>;
        RABBITMQ_MAX_RETRIES: import("zod").ZodDefault<import("zod").ZodNumber>;
        RABBITMQ_RETRY_DELAY: import("zod").ZodDefault<import("zod").ZodNumber>;
        REDIS_HOST: import("zod").ZodDefault<import("zod").ZodString>;
        REDIS_PORT: import("zod").ZodDefault<import("zod").ZodNumber>;
        REDIS_PASSWORD: import("zod").ZodOptional<import("zod").ZodString>;
        REDIS_DB: import("zod").ZodDefault<import("zod").ZodNumber>;
        REDIS_CONNECTION_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        REDIS_COMMAND_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        REDIS_MAX_RETRIES: import("zod").ZodDefault<import("zod").ZodNumber>;
        REDIS_RETRY_DELAY: import("zod").ZodDefault<import("zod").ZodNumber>;
        LOG_LEVEL: import("zod").ZodDefault<import("zod").ZodEnum<["error", "warn", "info", "debug", "trace"]>>;
        LOG_FORMAT: import("zod").ZodDefault<import("zod").ZodEnum<["json", "pretty"]>>;
        LOG_MAX_FILE_SIZE: import("zod").ZodDefault<import("zod").ZodString>;
        LOG_MAX_FILES: import("zod").ZodDefault<import("zod").ZodString>;
        LOG_DATE_PATTERN: import("zod").ZodDefault<import("zod").ZodString>;
        METRICS_ENABLED: import("zod").ZodDefault<import("zod").ZodBoolean>;
        METRICS_PORT: import("zod").ZodDefault<import("zod").ZodNumber>;
        METRICS_PATH: import("zod").ZodDefault<import("zod").ZodString>;
        HEALTH_CHECK_ENABLED: import("zod").ZodDefault<import("zod").ZodBoolean>;
        HEALTH_CHECK_PATH: import("zod").ZodDefault<import("zod").ZodString>;
        HEALTH_CHECK_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        RATE_LIMIT_ENABLED: import("zod").ZodDefault<import("zod").ZodBoolean>;
        RATE_LIMIT_WINDOW_MS: import("zod").ZodDefault<import("zod").ZodNumber>;
        RATE_LIMIT_MAX_REQUESTS: import("zod").ZodDefault<import("zod").ZodNumber>;
        RATE_LIMIT_REDIS_ENABLED: import("zod").ZodDefault<import("zod").ZodBoolean>;
        RATE_LIMIT_REDIS_PREFIX: import("zod").ZodDefault<import("zod").ZodString>;
        CIRCUIT_BREAKER_ENABLED: import("zod").ZodDefault<import("zod").ZodBoolean>;
        CIRCUIT_BREAKER_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        CIRCUIT_BREAKER_ERROR_THRESHOLD: import("zod").ZodDefault<import("zod").ZodNumber>;
        CIRCUIT_BREAKER_RESET_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        MAX_CONCURRENT_CONNECTIONS: import("zod").ZodDefault<import("zod").ZodNumber>;
        KEEP_ALIVE_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        HEADERS_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        REQUEST_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        TENANT_HEADER_NAME: import("zod").ZodDefault<import("zod").ZodString>;
        DEFAULT_TENANT_ID: import("zod").ZodDefault<import("zod").ZodString>;
        FEATURE_BATCH_PROCESSING: import("zod").ZodDefault<import("zod").ZodBoolean>;
        FEATURE_COMPRESSION: import("zod").ZodDefault<import("zod").ZodBoolean>;
        FEATURE_CORRELATION_ID_GENERATION: import("zod").ZodDefault<import("zod").ZodBoolean>;
    }, "strip", import("zod").ZodTypeAny, {
        NODE_ENV: "development" | "staging" | "production";
        PORT: number;
        HOST: string;
        SERVICE_NAME: string;
        SERVICE_VERSION: string;
        DATABASE_URL: string;
        DATABASE_HOST: string;
        DATABASE_PORT: number;
        DATABASE_NAME: string;
        DATABASE_USER: string;
        DATABASE_PASSWORD: string;
        DATABASE_POOL_MIN: number;
        DATABASE_POOL_MAX: number;
        DATABASE_TIMEOUT: number;
        RABBITMQ_URL: string;
        RABBITMQ_HOSTNAME: string;
        RABBITMQ_PORT: number;
        RABBITMQ_USER: string;
        RABBITMQ_PASSWORD: string;
        RABBITMQ_VHOST: string;
        RABBITMQ_EXCHANGE: string;
        RABBITMQ_CONNECTION_TIMEOUT: number;
        RABBITMQ_HEARTBEAT: number;
        RABBITMQ_MAX_RETRIES: number;
        RABBITMQ_RETRY_DELAY: number;
        REDIS_HOST: string;
        REDIS_PORT: number;
        REDIS_DB: number;
        REDIS_CONNECTION_TIMEOUT: number;
        REDIS_COMMAND_TIMEOUT: number;
        REDIS_MAX_RETRIES: number;
        REDIS_RETRY_DELAY: number;
        LOG_LEVEL: "error" | "warn" | "info" | "debug" | "trace";
        LOG_FORMAT: "json" | "pretty";
        LOG_MAX_FILE_SIZE: string;
        LOG_MAX_FILES: string;
        LOG_DATE_PATTERN: string;
        METRICS_ENABLED: boolean;
        METRICS_PORT: number;
        METRICS_PATH: string;
        HEALTH_CHECK_ENABLED: boolean;
        HEALTH_CHECK_PATH: string;
        HEALTH_CHECK_TIMEOUT: number;
        RATE_LIMIT_ENABLED: boolean;
        RATE_LIMIT_WINDOW_MS: number;
        RATE_LIMIT_MAX_REQUESTS: number;
        RATE_LIMIT_REDIS_ENABLED: boolean;
        RATE_LIMIT_REDIS_PREFIX: string;
        CIRCUIT_BREAKER_ENABLED: boolean;
        CIRCUIT_BREAKER_TIMEOUT: number;
        CIRCUIT_BREAKER_ERROR_THRESHOLD: number;
        CIRCUIT_BREAKER_RESET_TIMEOUT: number;
        MAX_CONCURRENT_CONNECTIONS: number;
        KEEP_ALIVE_TIMEOUT: number;
        HEADERS_TIMEOUT: number;
        REQUEST_TIMEOUT: number;
        TENANT_HEADER_NAME: string;
        DEFAULT_TENANT_ID: string;
        FEATURE_BATCH_PROCESSING: boolean;
        FEATURE_COMPRESSION: boolean;
        FEATURE_CORRELATION_ID_GENERATION: boolean;
        SERVICE_INSTANCE_ID?: string | undefined;
        REDIS_PASSWORD?: string | undefined;
    }, {
        DATABASE_URL: string;
        DATABASE_HOST: string;
        DATABASE_NAME: string;
        DATABASE_USER: string;
        DATABASE_PASSWORD: string;
        NODE_ENV?: "development" | "staging" | "production" | undefined;
        PORT?: number | undefined;
        HOST?: string | undefined;
        SERVICE_NAME?: string | undefined;
        SERVICE_VERSION?: string | undefined;
        SERVICE_INSTANCE_ID?: string | undefined;
        DATABASE_PORT?: number | undefined;
        DATABASE_POOL_MIN?: number | undefined;
        DATABASE_POOL_MAX?: number | undefined;
        DATABASE_TIMEOUT?: number | undefined;
        RABBITMQ_URL?: string | undefined;
        RABBITMQ_HOSTNAME?: string | undefined;
        RABBITMQ_PORT?: number | undefined;
        RABBITMQ_USER?: string | undefined;
        RABBITMQ_PASSWORD?: string | undefined;
        RABBITMQ_VHOST?: string | undefined;
        RABBITMQ_EXCHANGE?: string | undefined;
        RABBITMQ_CONNECTION_TIMEOUT?: number | undefined;
        RABBITMQ_HEARTBEAT?: number | undefined;
        RABBITMQ_MAX_RETRIES?: number | undefined;
        RABBITMQ_RETRY_DELAY?: number | undefined;
        REDIS_HOST?: string | undefined;
        REDIS_PORT?: number | undefined;
        REDIS_PASSWORD?: string | undefined;
        REDIS_DB?: number | undefined;
        REDIS_CONNECTION_TIMEOUT?: number | undefined;
        REDIS_COMMAND_TIMEOUT?: number | undefined;
        REDIS_MAX_RETRIES?: number | undefined;
        REDIS_RETRY_DELAY?: number | undefined;
        LOG_LEVEL?: "error" | "warn" | "info" | "debug" | "trace" | undefined;
        LOG_FORMAT?: "json" | "pretty" | undefined;
        LOG_MAX_FILE_SIZE?: string | undefined;
        LOG_MAX_FILES?: string | undefined;
        LOG_DATE_PATTERN?: string | undefined;
        METRICS_ENABLED?: boolean | undefined;
        METRICS_PORT?: number | undefined;
        METRICS_PATH?: string | undefined;
        HEALTH_CHECK_ENABLED?: boolean | undefined;
        HEALTH_CHECK_PATH?: string | undefined;
        HEALTH_CHECK_TIMEOUT?: number | undefined;
        RATE_LIMIT_ENABLED?: boolean | undefined;
        RATE_LIMIT_WINDOW_MS?: number | undefined;
        RATE_LIMIT_MAX_REQUESTS?: number | undefined;
        RATE_LIMIT_REDIS_ENABLED?: boolean | undefined;
        RATE_LIMIT_REDIS_PREFIX?: string | undefined;
        CIRCUIT_BREAKER_ENABLED?: boolean | undefined;
        CIRCUIT_BREAKER_TIMEOUT?: number | undefined;
        CIRCUIT_BREAKER_ERROR_THRESHOLD?: number | undefined;
        CIRCUIT_BREAKER_RESET_TIMEOUT?: number | undefined;
        MAX_CONCURRENT_CONNECTIONS?: number | undefined;
        KEEP_ALIVE_TIMEOUT?: number | undefined;
        HEADERS_TIMEOUT?: number | undefined;
        REQUEST_TIMEOUT?: number | undefined;
        TENANT_HEADER_NAME?: string | undefined;
        DEFAULT_TENANT_ID?: string | undefined;
        FEATURE_BATCH_PROCESSING?: boolean | undefined;
        FEATURE_COMPRESSION?: boolean | undefined;
        FEATURE_CORRELATION_ID_GENERATION?: boolean | undefined;
    }>;
};
declare const _default: {
    ObservabilityLogger: typeof ObservabilityLogger;
    createObservabilityConfigSchema: (serviceName: string, defaultPort: number, defaultMetricsPort: number) => import("zod").ZodObject<{
        NODE_ENV: import("zod").ZodDefault<import("zod").ZodEnum<["development", "staging", "production"]>>;
        PORT: import("zod").ZodDefault<import("zod").ZodNumber>;
        HOST: import("zod").ZodDefault<import("zod").ZodString>;
        SERVICE_NAME: import("zod").ZodDefault<import("zod").ZodString>;
        SERVICE_VERSION: import("zod").ZodDefault<import("zod").ZodString>;
        SERVICE_INSTANCE_ID: import("zod").ZodOptional<import("zod").ZodString>;
        DATABASE_URL: import("zod").ZodString;
        DATABASE_HOST: import("zod").ZodString;
        DATABASE_PORT: import("zod").ZodDefault<import("zod").ZodNumber>;
        DATABASE_NAME: import("zod").ZodString;
        DATABASE_USER: import("zod").ZodString;
        DATABASE_PASSWORD: import("zod").ZodString;
        DATABASE_POOL_MIN: import("zod").ZodDefault<import("zod").ZodNumber>;
        DATABASE_POOL_MAX: import("zod").ZodDefault<import("zod").ZodNumber>;
        DATABASE_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        RABBITMQ_URL: import("zod").ZodDefault<import("zod").ZodString>;
        RABBITMQ_HOSTNAME: import("zod").ZodDefault<import("zod").ZodString>;
        RABBITMQ_PORT: import("zod").ZodDefault<import("zod").ZodNumber>;
        RABBITMQ_USER: import("zod").ZodDefault<import("zod").ZodString>;
        RABBITMQ_PASSWORD: import("zod").ZodDefault<import("zod").ZodString>;
        RABBITMQ_VHOST: import("zod").ZodDefault<import("zod").ZodString>;
        RABBITMQ_EXCHANGE: import("zod").ZodDefault<import("zod").ZodString>;
        RABBITMQ_CONNECTION_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        RABBITMQ_HEARTBEAT: import("zod").ZodDefault<import("zod").ZodNumber>;
        RABBITMQ_MAX_RETRIES: import("zod").ZodDefault<import("zod").ZodNumber>;
        RABBITMQ_RETRY_DELAY: import("zod").ZodDefault<import("zod").ZodNumber>;
        REDIS_HOST: import("zod").ZodDefault<import("zod").ZodString>;
        REDIS_PORT: import("zod").ZodDefault<import("zod").ZodNumber>;
        REDIS_PASSWORD: import("zod").ZodOptional<import("zod").ZodString>;
        REDIS_DB: import("zod").ZodDefault<import("zod").ZodNumber>;
        REDIS_CONNECTION_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        REDIS_COMMAND_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        REDIS_MAX_RETRIES: import("zod").ZodDefault<import("zod").ZodNumber>;
        REDIS_RETRY_DELAY: import("zod").ZodDefault<import("zod").ZodNumber>;
        LOG_LEVEL: import("zod").ZodDefault<import("zod").ZodEnum<["error", "warn", "info", "debug", "trace"]>>;
        LOG_FORMAT: import("zod").ZodDefault<import("zod").ZodEnum<["json", "pretty"]>>;
        LOG_MAX_FILE_SIZE: import("zod").ZodDefault<import("zod").ZodString>;
        LOG_MAX_FILES: import("zod").ZodDefault<import("zod").ZodString>;
        LOG_DATE_PATTERN: import("zod").ZodDefault<import("zod").ZodString>;
        METRICS_ENABLED: import("zod").ZodDefault<import("zod").ZodBoolean>;
        METRICS_PORT: import("zod").ZodDefault<import("zod").ZodNumber>;
        METRICS_PATH: import("zod").ZodDefault<import("zod").ZodString>;
        HEALTH_CHECK_ENABLED: import("zod").ZodDefault<import("zod").ZodBoolean>;
        HEALTH_CHECK_PATH: import("zod").ZodDefault<import("zod").ZodString>;
        HEALTH_CHECK_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        RATE_LIMIT_ENABLED: import("zod").ZodDefault<import("zod").ZodBoolean>;
        RATE_LIMIT_WINDOW_MS: import("zod").ZodDefault<import("zod").ZodNumber>;
        RATE_LIMIT_MAX_REQUESTS: import("zod").ZodDefault<import("zod").ZodNumber>;
        RATE_LIMIT_REDIS_ENABLED: import("zod").ZodDefault<import("zod").ZodBoolean>;
        RATE_LIMIT_REDIS_PREFIX: import("zod").ZodDefault<import("zod").ZodString>;
        CIRCUIT_BREAKER_ENABLED: import("zod").ZodDefault<import("zod").ZodBoolean>;
        CIRCUIT_BREAKER_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        CIRCUIT_BREAKER_ERROR_THRESHOLD: import("zod").ZodDefault<import("zod").ZodNumber>;
        CIRCUIT_BREAKER_RESET_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        MAX_CONCURRENT_CONNECTIONS: import("zod").ZodDefault<import("zod").ZodNumber>;
        KEEP_ALIVE_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        HEADERS_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        REQUEST_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
        TENANT_HEADER_NAME: import("zod").ZodDefault<import("zod").ZodString>;
        DEFAULT_TENANT_ID: import("zod").ZodDefault<import("zod").ZodString>;
        FEATURE_BATCH_PROCESSING: import("zod").ZodDefault<import("zod").ZodBoolean>;
        FEATURE_COMPRESSION: import("zod").ZodDefault<import("zod").ZodBoolean>;
        FEATURE_CORRELATION_ID_GENERATION: import("zod").ZodDefault<import("zod").ZodBoolean>;
    }, "strip", import("zod").ZodTypeAny, {
        NODE_ENV: "development" | "staging" | "production";
        PORT: number;
        HOST: string;
        SERVICE_NAME: string;
        SERVICE_VERSION: string;
        DATABASE_URL: string;
        DATABASE_HOST: string;
        DATABASE_PORT: number;
        DATABASE_NAME: string;
        DATABASE_USER: string;
        DATABASE_PASSWORD: string;
        DATABASE_POOL_MIN: number;
        DATABASE_POOL_MAX: number;
        DATABASE_TIMEOUT: number;
        RABBITMQ_URL: string;
        RABBITMQ_HOSTNAME: string;
        RABBITMQ_PORT: number;
        RABBITMQ_USER: string;
        RABBITMQ_PASSWORD: string;
        RABBITMQ_VHOST: string;
        RABBITMQ_EXCHANGE: string;
        RABBITMQ_CONNECTION_TIMEOUT: number;
        RABBITMQ_HEARTBEAT: number;
        RABBITMQ_MAX_RETRIES: number;
        RABBITMQ_RETRY_DELAY: number;
        REDIS_HOST: string;
        REDIS_PORT: number;
        REDIS_DB: number;
        REDIS_CONNECTION_TIMEOUT: number;
        REDIS_COMMAND_TIMEOUT: number;
        REDIS_MAX_RETRIES: number;
        REDIS_RETRY_DELAY: number;
        LOG_LEVEL: "error" | "warn" | "info" | "debug" | "trace";
        LOG_FORMAT: "json" | "pretty";
        LOG_MAX_FILE_SIZE: string;
        LOG_MAX_FILES: string;
        LOG_DATE_PATTERN: string;
        METRICS_ENABLED: boolean;
        METRICS_PORT: number;
        METRICS_PATH: string;
        HEALTH_CHECK_ENABLED: boolean;
        HEALTH_CHECK_PATH: string;
        HEALTH_CHECK_TIMEOUT: number;
        RATE_LIMIT_ENABLED: boolean;
        RATE_LIMIT_WINDOW_MS: number;
        RATE_LIMIT_MAX_REQUESTS: number;
        RATE_LIMIT_REDIS_ENABLED: boolean;
        RATE_LIMIT_REDIS_PREFIX: string;
        CIRCUIT_BREAKER_ENABLED: boolean;
        CIRCUIT_BREAKER_TIMEOUT: number;
        CIRCUIT_BREAKER_ERROR_THRESHOLD: number;
        CIRCUIT_BREAKER_RESET_TIMEOUT: number;
        MAX_CONCURRENT_CONNECTIONS: number;
        KEEP_ALIVE_TIMEOUT: number;
        HEADERS_TIMEOUT: number;
        REQUEST_TIMEOUT: number;
        TENANT_HEADER_NAME: string;
        DEFAULT_TENANT_ID: string;
        FEATURE_BATCH_PROCESSING: boolean;
        FEATURE_COMPRESSION: boolean;
        FEATURE_CORRELATION_ID_GENERATION: boolean;
        SERVICE_INSTANCE_ID?: string | undefined;
        REDIS_PASSWORD?: string | undefined;
    }, {
        DATABASE_URL: string;
        DATABASE_HOST: string;
        DATABASE_NAME: string;
        DATABASE_USER: string;
        DATABASE_PASSWORD: string;
        NODE_ENV?: "development" | "staging" | "production" | undefined;
        PORT?: number | undefined;
        HOST?: string | undefined;
        SERVICE_NAME?: string | undefined;
        SERVICE_VERSION?: string | undefined;
        SERVICE_INSTANCE_ID?: string | undefined;
        DATABASE_PORT?: number | undefined;
        DATABASE_POOL_MIN?: number | undefined;
        DATABASE_POOL_MAX?: number | undefined;
        DATABASE_TIMEOUT?: number | undefined;
        RABBITMQ_URL?: string | undefined;
        RABBITMQ_HOSTNAME?: string | undefined;
        RABBITMQ_PORT?: number | undefined;
        RABBITMQ_USER?: string | undefined;
        RABBITMQ_PASSWORD?: string | undefined;
        RABBITMQ_VHOST?: string | undefined;
        RABBITMQ_EXCHANGE?: string | undefined;
        RABBITMQ_CONNECTION_TIMEOUT?: number | undefined;
        RABBITMQ_HEARTBEAT?: number | undefined;
        RABBITMQ_MAX_RETRIES?: number | undefined;
        RABBITMQ_RETRY_DELAY?: number | undefined;
        REDIS_HOST?: string | undefined;
        REDIS_PORT?: number | undefined;
        REDIS_PASSWORD?: string | undefined;
        REDIS_DB?: number | undefined;
        REDIS_CONNECTION_TIMEOUT?: number | undefined;
        REDIS_COMMAND_TIMEOUT?: number | undefined;
        REDIS_MAX_RETRIES?: number | undefined;
        REDIS_RETRY_DELAY?: number | undefined;
        LOG_LEVEL?: "error" | "warn" | "info" | "debug" | "trace" | undefined;
        LOG_FORMAT?: "json" | "pretty" | undefined;
        LOG_MAX_FILE_SIZE?: string | undefined;
        LOG_MAX_FILES?: string | undefined;
        LOG_DATE_PATTERN?: string | undefined;
        METRICS_ENABLED?: boolean | undefined;
        METRICS_PORT?: number | undefined;
        METRICS_PATH?: string | undefined;
        HEALTH_CHECK_ENABLED?: boolean | undefined;
        HEALTH_CHECK_PATH?: string | undefined;
        HEALTH_CHECK_TIMEOUT?: number | undefined;
        RATE_LIMIT_ENABLED?: boolean | undefined;
        RATE_LIMIT_WINDOW_MS?: number | undefined;
        RATE_LIMIT_MAX_REQUESTS?: number | undefined;
        RATE_LIMIT_REDIS_ENABLED?: boolean | undefined;
        RATE_LIMIT_REDIS_PREFIX?: string | undefined;
        CIRCUIT_BREAKER_ENABLED?: boolean | undefined;
        CIRCUIT_BREAKER_TIMEOUT?: number | undefined;
        CIRCUIT_BREAKER_ERROR_THRESHOLD?: number | undefined;
        CIRCUIT_BREAKER_RESET_TIMEOUT?: number | undefined;
        MAX_CONCURRENT_CONNECTIONS?: number | undefined;
        KEEP_ALIVE_TIMEOUT?: number | undefined;
        HEADERS_TIMEOUT?: number | undefined;
        REQUEST_TIMEOUT?: number | undefined;
        TENANT_HEADER_NAME?: string | undefined;
        DEFAULT_TENANT_ID?: string | undefined;
        FEATURE_BATCH_PROCESSING?: boolean | undefined;
        FEATURE_COMPRESSION?: boolean | undefined;
        FEATURE_CORRELATION_ID_GENERATION?: boolean | undefined;
    }>;
    createRedisClient: (config: RedisConfig, serviceName: string, logger: ObservabilityLogger) => import("./redis").RedisClient;
    createHealthCheckHandler: (serviceName: string, serviceVersion: string, dependencies: {
        database: import("./health").DatabaseService;
        redis?: import("./health").RedisService;
        rateLimiting?: import("./health").RateLimitService;
    }) => () => Promise<import("./health").HealthCheckResult>;
    createObservabilitySetup: (serviceName: string, config?: Partial<ObservabilityConfig>) => {
        logger: ObservabilityLogger;
        redis: {
            getRedisClient: () => import("./redis").RedisClient;
            initializeRedis: () => Promise<import("./redis").RedisClient>;
            closeRedis: () => Promise<void>;
        } | null;
        healthCheck: () => Promise<import("./health").HealthCheckResult>;
        config: import("zod").ZodObject<{
            NODE_ENV: import("zod").ZodDefault<import("zod").ZodEnum<["development", "staging", "production"]>>;
            PORT: import("zod").ZodDefault<import("zod").ZodNumber>;
            HOST: import("zod").ZodDefault<import("zod").ZodString>;
            SERVICE_NAME: import("zod").ZodDefault<import("zod").ZodString>;
            SERVICE_VERSION: import("zod").ZodDefault<import("zod").ZodString>;
            SERVICE_INSTANCE_ID: import("zod").ZodOptional<import("zod").ZodString>;
            DATABASE_URL: import("zod").ZodString;
            DATABASE_HOST: import("zod").ZodString;
            DATABASE_PORT: import("zod").ZodDefault<import("zod").ZodNumber>;
            DATABASE_NAME: import("zod").ZodString;
            DATABASE_USER: import("zod").ZodString;
            DATABASE_PASSWORD: import("zod").ZodString;
            DATABASE_POOL_MIN: import("zod").ZodDefault<import("zod").ZodNumber>;
            DATABASE_POOL_MAX: import("zod").ZodDefault<import("zod").ZodNumber>;
            DATABASE_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
            RABBITMQ_URL: import("zod").ZodDefault<import("zod").ZodString>;
            RABBITMQ_HOSTNAME: import("zod").ZodDefault<import("zod").ZodString>;
            RABBITMQ_PORT: import("zod").ZodDefault<import("zod").ZodNumber>;
            RABBITMQ_USER: import("zod").ZodDefault<import("zod").ZodString>;
            RABBITMQ_PASSWORD: import("zod").ZodDefault<import("zod").ZodString>;
            RABBITMQ_VHOST: import("zod").ZodDefault<import("zod").ZodString>;
            RABBITMQ_EXCHANGE: import("zod").ZodDefault<import("zod").ZodString>;
            RABBITMQ_CONNECTION_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
            RABBITMQ_HEARTBEAT: import("zod").ZodDefault<import("zod").ZodNumber>;
            RABBITMQ_MAX_RETRIES: import("zod").ZodDefault<import("zod").ZodNumber>;
            RABBITMQ_RETRY_DELAY: import("zod").ZodDefault<import("zod").ZodNumber>;
            REDIS_HOST: import("zod").ZodDefault<import("zod").ZodString>;
            REDIS_PORT: import("zod").ZodDefault<import("zod").ZodNumber>;
            REDIS_PASSWORD: import("zod").ZodOptional<import("zod").ZodString>;
            REDIS_DB: import("zod").ZodDefault<import("zod").ZodNumber>;
            REDIS_CONNECTION_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
            REDIS_COMMAND_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
            REDIS_MAX_RETRIES: import("zod").ZodDefault<import("zod").ZodNumber>;
            REDIS_RETRY_DELAY: import("zod").ZodDefault<import("zod").ZodNumber>;
            LOG_LEVEL: import("zod").ZodDefault<import("zod").ZodEnum<["error", "warn", "info", "debug", "trace"]>>;
            LOG_FORMAT: import("zod").ZodDefault<import("zod").ZodEnum<["json", "pretty"]>>;
            LOG_MAX_FILE_SIZE: import("zod").ZodDefault<import("zod").ZodString>;
            LOG_MAX_FILES: import("zod").ZodDefault<import("zod").ZodString>;
            LOG_DATE_PATTERN: import("zod").ZodDefault<import("zod").ZodString>;
            METRICS_ENABLED: import("zod").ZodDefault<import("zod").ZodBoolean>;
            METRICS_PORT: import("zod").ZodDefault<import("zod").ZodNumber>;
            METRICS_PATH: import("zod").ZodDefault<import("zod").ZodString>;
            HEALTH_CHECK_ENABLED: import("zod").ZodDefault<import("zod").ZodBoolean>;
            HEALTH_CHECK_PATH: import("zod").ZodDefault<import("zod").ZodString>;
            HEALTH_CHECK_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
            RATE_LIMIT_ENABLED: import("zod").ZodDefault<import("zod").ZodBoolean>;
            RATE_LIMIT_WINDOW_MS: import("zod").ZodDefault<import("zod").ZodNumber>;
            RATE_LIMIT_MAX_REQUESTS: import("zod").ZodDefault<import("zod").ZodNumber>;
            RATE_LIMIT_REDIS_ENABLED: import("zod").ZodDefault<import("zod").ZodBoolean>;
            RATE_LIMIT_REDIS_PREFIX: import("zod").ZodDefault<import("zod").ZodString>;
            CIRCUIT_BREAKER_ENABLED: import("zod").ZodDefault<import("zod").ZodBoolean>;
            CIRCUIT_BREAKER_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
            CIRCUIT_BREAKER_ERROR_THRESHOLD: import("zod").ZodDefault<import("zod").ZodNumber>;
            CIRCUIT_BREAKER_RESET_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
            MAX_CONCURRENT_CONNECTIONS: import("zod").ZodDefault<import("zod").ZodNumber>;
            KEEP_ALIVE_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
            HEADERS_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
            REQUEST_TIMEOUT: import("zod").ZodDefault<import("zod").ZodNumber>;
            TENANT_HEADER_NAME: import("zod").ZodDefault<import("zod").ZodString>;
            DEFAULT_TENANT_ID: import("zod").ZodDefault<import("zod").ZodString>;
            FEATURE_BATCH_PROCESSING: import("zod").ZodDefault<import("zod").ZodBoolean>;
            FEATURE_COMPRESSION: import("zod").ZodDefault<import("zod").ZodBoolean>;
            FEATURE_CORRELATION_ID_GENERATION: import("zod").ZodDefault<import("zod").ZodBoolean>;
        }, "strip", import("zod").ZodTypeAny, {
            NODE_ENV: "development" | "staging" | "production";
            PORT: number;
            HOST: string;
            SERVICE_NAME: string;
            SERVICE_VERSION: string;
            DATABASE_URL: string;
            DATABASE_HOST: string;
            DATABASE_PORT: number;
            DATABASE_NAME: string;
            DATABASE_USER: string;
            DATABASE_PASSWORD: string;
            DATABASE_POOL_MIN: number;
            DATABASE_POOL_MAX: number;
            DATABASE_TIMEOUT: number;
            RABBITMQ_URL: string;
            RABBITMQ_HOSTNAME: string;
            RABBITMQ_PORT: number;
            RABBITMQ_USER: string;
            RABBITMQ_PASSWORD: string;
            RABBITMQ_VHOST: string;
            RABBITMQ_EXCHANGE: string;
            RABBITMQ_CONNECTION_TIMEOUT: number;
            RABBITMQ_HEARTBEAT: number;
            RABBITMQ_MAX_RETRIES: number;
            RABBITMQ_RETRY_DELAY: number;
            REDIS_HOST: string;
            REDIS_PORT: number;
            REDIS_DB: number;
            REDIS_CONNECTION_TIMEOUT: number;
            REDIS_COMMAND_TIMEOUT: number;
            REDIS_MAX_RETRIES: number;
            REDIS_RETRY_DELAY: number;
            LOG_LEVEL: "error" | "warn" | "info" | "debug" | "trace";
            LOG_FORMAT: "json" | "pretty";
            LOG_MAX_FILE_SIZE: string;
            LOG_MAX_FILES: string;
            LOG_DATE_PATTERN: string;
            METRICS_ENABLED: boolean;
            METRICS_PORT: number;
            METRICS_PATH: string;
            HEALTH_CHECK_ENABLED: boolean;
            HEALTH_CHECK_PATH: string;
            HEALTH_CHECK_TIMEOUT: number;
            RATE_LIMIT_ENABLED: boolean;
            RATE_LIMIT_WINDOW_MS: number;
            RATE_LIMIT_MAX_REQUESTS: number;
            RATE_LIMIT_REDIS_ENABLED: boolean;
            RATE_LIMIT_REDIS_PREFIX: string;
            CIRCUIT_BREAKER_ENABLED: boolean;
            CIRCUIT_BREAKER_TIMEOUT: number;
            CIRCUIT_BREAKER_ERROR_THRESHOLD: number;
            CIRCUIT_BREAKER_RESET_TIMEOUT: number;
            MAX_CONCURRENT_CONNECTIONS: number;
            KEEP_ALIVE_TIMEOUT: number;
            HEADERS_TIMEOUT: number;
            REQUEST_TIMEOUT: number;
            TENANT_HEADER_NAME: string;
            DEFAULT_TENANT_ID: string;
            FEATURE_BATCH_PROCESSING: boolean;
            FEATURE_COMPRESSION: boolean;
            FEATURE_CORRELATION_ID_GENERATION: boolean;
            SERVICE_INSTANCE_ID?: string | undefined;
            REDIS_PASSWORD?: string | undefined;
        }, {
            DATABASE_URL: string;
            DATABASE_HOST: string;
            DATABASE_NAME: string;
            DATABASE_USER: string;
            DATABASE_PASSWORD: string;
            NODE_ENV?: "development" | "staging" | "production" | undefined;
            PORT?: number | undefined;
            HOST?: string | undefined;
            SERVICE_NAME?: string | undefined;
            SERVICE_VERSION?: string | undefined;
            SERVICE_INSTANCE_ID?: string | undefined;
            DATABASE_PORT?: number | undefined;
            DATABASE_POOL_MIN?: number | undefined;
            DATABASE_POOL_MAX?: number | undefined;
            DATABASE_TIMEOUT?: number | undefined;
            RABBITMQ_URL?: string | undefined;
            RABBITMQ_HOSTNAME?: string | undefined;
            RABBITMQ_PORT?: number | undefined;
            RABBITMQ_USER?: string | undefined;
            RABBITMQ_PASSWORD?: string | undefined;
            RABBITMQ_VHOST?: string | undefined;
            RABBITMQ_EXCHANGE?: string | undefined;
            RABBITMQ_CONNECTION_TIMEOUT?: number | undefined;
            RABBITMQ_HEARTBEAT?: number | undefined;
            RABBITMQ_MAX_RETRIES?: number | undefined;
            RABBITMQ_RETRY_DELAY?: number | undefined;
            REDIS_HOST?: string | undefined;
            REDIS_PORT?: number | undefined;
            REDIS_PASSWORD?: string | undefined;
            REDIS_DB?: number | undefined;
            REDIS_CONNECTION_TIMEOUT?: number | undefined;
            REDIS_COMMAND_TIMEOUT?: number | undefined;
            REDIS_MAX_RETRIES?: number | undefined;
            REDIS_RETRY_DELAY?: number | undefined;
            LOG_LEVEL?: "error" | "warn" | "info" | "debug" | "trace" | undefined;
            LOG_FORMAT?: "json" | "pretty" | undefined;
            LOG_MAX_FILE_SIZE?: string | undefined;
            LOG_MAX_FILES?: string | undefined;
            LOG_DATE_PATTERN?: string | undefined;
            METRICS_ENABLED?: boolean | undefined;
            METRICS_PORT?: number | undefined;
            METRICS_PATH?: string | undefined;
            HEALTH_CHECK_ENABLED?: boolean | undefined;
            HEALTH_CHECK_PATH?: string | undefined;
            HEALTH_CHECK_TIMEOUT?: number | undefined;
            RATE_LIMIT_ENABLED?: boolean | undefined;
            RATE_LIMIT_WINDOW_MS?: number | undefined;
            RATE_LIMIT_MAX_REQUESTS?: number | undefined;
            RATE_LIMIT_REDIS_ENABLED?: boolean | undefined;
            RATE_LIMIT_REDIS_PREFIX?: string | undefined;
            CIRCUIT_BREAKER_ENABLED?: boolean | undefined;
            CIRCUIT_BREAKER_TIMEOUT?: number | undefined;
            CIRCUIT_BREAKER_ERROR_THRESHOLD?: number | undefined;
            CIRCUIT_BREAKER_RESET_TIMEOUT?: number | undefined;
            MAX_CONCURRENT_CONNECTIONS?: number | undefined;
            KEEP_ALIVE_TIMEOUT?: number | undefined;
            HEADERS_TIMEOUT?: number | undefined;
            REQUEST_TIMEOUT?: number | undefined;
            TENANT_HEADER_NAME?: string | undefined;
            DEFAULT_TENANT_ID?: string | undefined;
            FEATURE_BATCH_PROCESSING?: boolean | undefined;
            FEATURE_COMPRESSION?: boolean | undefined;
            FEATURE_CORRELATION_ID_GENERATION?: boolean | undefined;
        }>;
    };
};
export default _default;
//# sourceMappingURL=index.d.ts.map