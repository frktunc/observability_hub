import { z } from 'zod';
export declare const createObservabilityConfigSchema: (serviceName: string, defaultPort: number, defaultMetricsPort: number) => z.ZodObject<{
    NODE_ENV: z.ZodDefault<z.ZodEnum<["development", "staging", "production"]>>;
    PORT: z.ZodDefault<z.ZodNumber>;
    HOST: z.ZodDefault<z.ZodString>;
    SERVICE_NAME: z.ZodDefault<z.ZodString>;
    SERVICE_VERSION: z.ZodDefault<z.ZodString>;
    SERVICE_INSTANCE_ID: z.ZodOptional<z.ZodString>;
    DATABASE_URL: z.ZodString;
    DATABASE_HOST: z.ZodString;
    DATABASE_PORT: z.ZodDefault<z.ZodNumber>;
    DATABASE_NAME: z.ZodString;
    DATABASE_USER: z.ZodString;
    DATABASE_PASSWORD: z.ZodString;
    DATABASE_POOL_MIN: z.ZodDefault<z.ZodNumber>;
    DATABASE_POOL_MAX: z.ZodDefault<z.ZodNumber>;
    DATABASE_TIMEOUT: z.ZodDefault<z.ZodNumber>;
    RABBITMQ_URL: z.ZodDefault<z.ZodString>;
    RABBITMQ_HOSTNAME: z.ZodDefault<z.ZodString>;
    RABBITMQ_PORT: z.ZodDefault<z.ZodNumber>;
    RABBITMQ_USER: z.ZodDefault<z.ZodString>;
    RABBITMQ_PASSWORD: z.ZodDefault<z.ZodString>;
    RABBITMQ_VHOST: z.ZodDefault<z.ZodString>;
    RABBITMQ_EXCHANGE: z.ZodDefault<z.ZodString>;
    RABBITMQ_CONNECTION_TIMEOUT: z.ZodDefault<z.ZodNumber>;
    RABBITMQ_HEARTBEAT: z.ZodDefault<z.ZodNumber>;
    RABBITMQ_MAX_RETRIES: z.ZodDefault<z.ZodNumber>;
    RABBITMQ_RETRY_DELAY: z.ZodDefault<z.ZodNumber>;
    REDIS_HOST: z.ZodDefault<z.ZodString>;
    REDIS_PORT: z.ZodDefault<z.ZodNumber>;
    REDIS_PASSWORD: z.ZodOptional<z.ZodString>;
    REDIS_DB: z.ZodDefault<z.ZodNumber>;
    REDIS_CONNECTION_TIMEOUT: z.ZodDefault<z.ZodNumber>;
    REDIS_COMMAND_TIMEOUT: z.ZodDefault<z.ZodNumber>;
    REDIS_MAX_RETRIES: z.ZodDefault<z.ZodNumber>;
    REDIS_RETRY_DELAY: z.ZodDefault<z.ZodNumber>;
    LOG_LEVEL: z.ZodDefault<z.ZodEnum<["error", "warn", "info", "debug", "trace"]>>;
    LOG_FORMAT: z.ZodDefault<z.ZodEnum<["json", "pretty"]>>;
    LOG_MAX_FILE_SIZE: z.ZodDefault<z.ZodString>;
    LOG_MAX_FILES: z.ZodDefault<z.ZodString>;
    LOG_DATE_PATTERN: z.ZodDefault<z.ZodString>;
    METRICS_ENABLED: z.ZodDefault<z.ZodBoolean>;
    METRICS_PORT: z.ZodDefault<z.ZodNumber>;
    METRICS_PATH: z.ZodDefault<z.ZodString>;
    HEALTH_CHECK_ENABLED: z.ZodDefault<z.ZodBoolean>;
    HEALTH_CHECK_PATH: z.ZodDefault<z.ZodString>;
    HEALTH_CHECK_TIMEOUT: z.ZodDefault<z.ZodNumber>;
    RATE_LIMIT_ENABLED: z.ZodDefault<z.ZodBoolean>;
    RATE_LIMIT_WINDOW_MS: z.ZodDefault<z.ZodNumber>;
    RATE_LIMIT_MAX_REQUESTS: z.ZodDefault<z.ZodNumber>;
    RATE_LIMIT_REDIS_ENABLED: z.ZodDefault<z.ZodBoolean>;
    RATE_LIMIT_REDIS_PREFIX: z.ZodDefault<z.ZodString>;
    CIRCUIT_BREAKER_ENABLED: z.ZodDefault<z.ZodBoolean>;
    CIRCUIT_BREAKER_TIMEOUT: z.ZodDefault<z.ZodNumber>;
    CIRCUIT_BREAKER_ERROR_THRESHOLD: z.ZodDefault<z.ZodNumber>;
    CIRCUIT_BREAKER_RESET_TIMEOUT: z.ZodDefault<z.ZodNumber>;
    MAX_CONCURRENT_CONNECTIONS: z.ZodDefault<z.ZodNumber>;
    KEEP_ALIVE_TIMEOUT: z.ZodDefault<z.ZodNumber>;
    HEADERS_TIMEOUT: z.ZodDefault<z.ZodNumber>;
    REQUEST_TIMEOUT: z.ZodDefault<z.ZodNumber>;
    TENANT_HEADER_NAME: z.ZodDefault<z.ZodString>;
    DEFAULT_TENANT_ID: z.ZodDefault<z.ZodString>;
    FEATURE_BATCH_PROCESSING: z.ZodDefault<z.ZodBoolean>;
    FEATURE_COMPRESSION: z.ZodDefault<z.ZodBoolean>;
    FEATURE_CORRELATION_ID_GENERATION: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    NODE_ENV: "development" | "staging" | "production";
    PORT: number;
    HOST: string;
    SERVICE_NAME: string;
    SERVICE_VERSION: string;
    DATABASE_URL: string;
    DATABASE_HOST: string;
    DATABASE_PORT: number;
    DATABASE_NAME: string;
    DATABASE_USER: string;
    DATABASE_PASSWORD: string;
    DATABASE_POOL_MIN: number;
    DATABASE_POOL_MAX: number;
    DATABASE_TIMEOUT: number;
    RABBITMQ_URL: string;
    RABBITMQ_HOSTNAME: string;
    RABBITMQ_PORT: number;
    RABBITMQ_USER: string;
    RABBITMQ_PASSWORD: string;
    RABBITMQ_VHOST: string;
    RABBITMQ_EXCHANGE: string;
    RABBITMQ_CONNECTION_TIMEOUT: number;
    RABBITMQ_HEARTBEAT: number;
    RABBITMQ_MAX_RETRIES: number;
    RABBITMQ_RETRY_DELAY: number;
    REDIS_HOST: string;
    REDIS_PORT: number;
    REDIS_DB: number;
    REDIS_CONNECTION_TIMEOUT: number;
    REDIS_COMMAND_TIMEOUT: number;
    REDIS_MAX_RETRIES: number;
    REDIS_RETRY_DELAY: number;
    LOG_LEVEL: "error" | "warn" | "info" | "debug" | "trace";
    LOG_FORMAT: "json" | "pretty";
    LOG_MAX_FILE_SIZE: string;
    LOG_MAX_FILES: string;
    LOG_DATE_PATTERN: string;
    METRICS_ENABLED: boolean;
    METRICS_PORT: number;
    METRICS_PATH: string;
    HEALTH_CHECK_ENABLED: boolean;
    HEALTH_CHECK_PATH: string;
    HEALTH_CHECK_TIMEOUT: number;
    RATE_LIMIT_ENABLED: boolean;
    RATE_LIMIT_WINDOW_MS: number;
    RATE_LIMIT_MAX_REQUESTS: number;
    RATE_LIMIT_REDIS_ENABLED: boolean;
    RATE_LIMIT_REDIS_PREFIX: string;
    CIRCUIT_BREAKER_ENABLED: boolean;
    CIRCUIT_BREAKER_TIMEOUT: number;
    CIRCUIT_BREAKER_ERROR_THRESHOLD: number;
    CIRCUIT_BREAKER_RESET_TIMEOUT: number;
    MAX_CONCURRENT_CONNECTIONS: number;
    KEEP_ALIVE_TIMEOUT: number;
    HEADERS_TIMEOUT: number;
    REQUEST_TIMEOUT: number;
    TENANT_HEADER_NAME: string;
    DEFAULT_TENANT_ID: string;
    FEATURE_BATCH_PROCESSING: boolean;
    FEATURE_COMPRESSION: boolean;
    FEATURE_CORRELATION_ID_GENERATION: boolean;
    SERVICE_INSTANCE_ID?: string | undefined;
    REDIS_PASSWORD?: string | undefined;
}, {
    DATABASE_URL: string;
    DATABASE_HOST: string;
    DATABASE_NAME: string;
    DATABASE_USER: string;
    DATABASE_PASSWORD: string;
    NODE_ENV?: "development" | "staging" | "production" | undefined;
    PORT?: number | undefined;
    HOST?: string | undefined;
    SERVICE_NAME?: string | undefined;
    SERVICE_VERSION?: string | undefined;
    SERVICE_INSTANCE_ID?: string | undefined;
    DATABASE_PORT?: number | undefined;
    DATABASE_POOL_MIN?: number | undefined;
    DATABASE_POOL_MAX?: number | undefined;
    DATABASE_TIMEOUT?: number | undefined;
    RABBITMQ_URL?: string | undefined;
    RABBITMQ_HOSTNAME?: string | undefined;
    RABBITMQ_PORT?: number | undefined;
    RABBITMQ_USER?: string | undefined;
    RABBITMQ_PASSWORD?: string | undefined;
    RABBITMQ_VHOST?: string | undefined;
    RABBITMQ_EXCHANGE?: string | undefined;
    RABBITMQ_CONNECTION_TIMEOUT?: number | undefined;
    RABBITMQ_HEARTBEAT?: number | undefined;
    RABBITMQ_MAX_RETRIES?: number | undefined;
    RABBITMQ_RETRY_DELAY?: number | undefined;
    REDIS_HOST?: string | undefined;
    REDIS_PORT?: number | undefined;
    REDIS_PASSWORD?: string | undefined;
    REDIS_DB?: number | undefined;
    REDIS_CONNECTION_TIMEOUT?: number | undefined;
    REDIS_COMMAND_TIMEOUT?: number | undefined;
    REDIS_MAX_RETRIES?: number | undefined;
    REDIS_RETRY_DELAY?: number | undefined;
    LOG_LEVEL?: "error" | "warn" | "info" | "debug" | "trace" | undefined;
    LOG_FORMAT?: "json" | "pretty" | undefined;
    LOG_MAX_FILE_SIZE?: string | undefined;
    LOG_MAX_FILES?: string | undefined;
    LOG_DATE_PATTERN?: string | undefined;
    METRICS_ENABLED?: boolean | undefined;
    METRICS_PORT?: number | undefined;
    METRICS_PATH?: string | undefined;
    HEALTH_CHECK_ENABLED?: boolean | undefined;
    HEALTH_CHECK_PATH?: string | undefined;
    HEALTH_CHECK_TIMEOUT?: number | undefined;
    RATE_LIMIT_ENABLED?: boolean | undefined;
    RATE_LIMIT_WINDOW_MS?: number | undefined;
    RATE_LIMIT_MAX_REQUESTS?: number | undefined;
    RATE_LIMIT_REDIS_ENABLED?: boolean | undefined;
    RATE_LIMIT_REDIS_PREFIX?: string | undefined;
    CIRCUIT_BREAKER_ENABLED?: boolean | undefined;
    CIRCUIT_BREAKER_TIMEOUT?: number | undefined;
    CIRCUIT_BREAKER_ERROR_THRESHOLD?: number | undefined;
    CIRCUIT_BREAKER_RESET_TIMEOUT?: number | undefined;
    MAX_CONCURRENT_CONNECTIONS?: number | undefined;
    KEEP_ALIVE_TIMEOUT?: number | undefined;
    HEADERS_TIMEOUT?: number | undefined;
    REQUEST_TIMEOUT?: number | undefined;
    TENANT_HEADER_NAME?: string | undefined;
    DEFAULT_TENANT_ID?: string | undefined;
    FEATURE_BATCH_PROCESSING?: boolean | undefined;
    FEATURE_COMPRESSION?: boolean | undefined;
    FEATURE_CORRELATION_ID_GENERATION?: boolean | undefined;
}>;
export declare const createDerivedConfig: (config: any) => {
    isDevelopment: boolean;
    isProduction: boolean;
    httpUrl: string;
    metricsUrl: string;
    database: {
        url: any;
        host: any;
        port: any;
        name: any;
        user: any;
        password: any;
        pool: {
            min: any;
            max: any;
        };
        timeout: any;
    };
    rabbitmq: {
        url: any;
        hostname: any;
        port: any;
        user: any;
        password: any;
        vhost: any;
        exchange: any;
        routingKeys: {
            info: string;
            warning: string;
            error: string;
            debug: string;
            all: string;
        };
        connectionOptions: {
            heartbeat: any;
            timeout: any;
        };
        retryOptions: {
            maxRetries: any;
            retryDelayMs: any;
        };
    };
    redis: {
        host: any;
        port: any;
        password: any;
        db: any;
        connectionTimeout: any;
        commandTimeout: any;
        maxRetries: any;
        retryDelay: any;
        rateLimiting: {
            enabled: any;
            prefix: any;
        };
    };
    circuitBreaker: {
        enabled: any;
        timeout: any;
        errorThreshold: any;
        resetTimeout: any;
    };
};
//# sourceMappingURL=index.d.ts.map