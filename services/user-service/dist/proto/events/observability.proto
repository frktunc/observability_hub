syntax = "proto3";

package observability.events.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/observability-hub/proto/events/v1;eventsv1";
option java_package = "com.observability.events.v1";
option java_outer_classname = "ObservabilityEventsProto";
option csharp_namespace = "Observability.Events.V1";

// Service definition for event ingestion
service EventCollectorService {
  // Submit a single event
  rpc SubmitEvent(SubmitEventRequest) returns (SubmitEventResponse);
  
  // Submit multiple events in batch
  rpc SubmitEventBatch(SubmitEventBatchRequest) returns (SubmitEventBatchResponse);
  
  // Stream events continuously
  rpc SubmitEventStream(stream SubmitEventRequest) returns (stream SubmitEventResponse);
  
  // Health check for the collector service
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
  
  // Get schema version information
  rpc GetSchemaInfo(GetSchemaInfoRequest) returns (GetSchemaInfoResponse);
}

// Common enums
enum EventPriority {
  EVENT_PRIORITY_UNSPECIFIED = 0;
  EVENT_PRIORITY_LOW = 1;
  EVENT_PRIORITY_NORMAL = 2;
  EVENT_PRIORITY_HIGH = 3;
  EVENT_PRIORITY_CRITICAL = 4;
}

enum Environment {
  ENVIRONMENT_UNSPECIFIED = 0;
  ENVIRONMENT_DEVELOPMENT = 1;
  ENVIRONMENT_TESTING = 2;
  ENVIRONMENT_STAGING = 3;
  ENVIRONMENT_PRODUCTION = 4;
}

enum LogLevel {
  LOG_LEVEL_UNSPECIFIED = 0;
  LOG_LEVEL_TRACE = 1;
  LOG_LEVEL_DEBUG = 2;
  LOG_LEVEL_INFO = 3;
  LOG_LEVEL_WARN = 4;
  LOG_LEVEL_ERROR = 5;
  LOG_LEVEL_FATAL = 6;
}

enum MetricType {
  METRIC_TYPE_UNSPECIFIED = 0;
  METRIC_TYPE_COUNTER = 1;
  METRIC_TYPE_GAUGE = 2;
  METRIC_TYPE_HISTOGRAM = 3;
  METRIC_TYPE_SUMMARY = 4;
  METRIC_TYPE_TIMER = 5;
}

enum SpanKind {
  SPAN_KIND_UNSPECIFIED = 0;
  SPAN_KIND_INTERNAL = 1;
  SPAN_KIND_SERVER = 2;
  SPAN_KIND_CLIENT = 3;
  SPAN_KIND_PRODUCER = 4;
  SPAN_KIND_CONSUMER = 5;
}

enum SpanStatusCode {
  SPAN_STATUS_CODE_UNSPECIFIED = 0;
  SPAN_STATUS_CODE_OK = 1;
  SPAN_STATUS_CODE_CANCELLED = 2;
  SPAN_STATUS_CODE_UNKNOWN = 3;
  SPAN_STATUS_CODE_INVALID_ARGUMENT = 4;
  SPAN_STATUS_CODE_DEADLINE_EXCEEDED = 5;
  SPAN_STATUS_CODE_NOT_FOUND = 6;
  SPAN_STATUS_CODE_ALREADY_EXISTS = 7;
  SPAN_STATUS_CODE_PERMISSION_DENIED = 8;
  SPAN_STATUS_CODE_RESOURCE_EXHAUSTED = 9;
  SPAN_STATUS_CODE_FAILED_PRECONDITION = 10;
  SPAN_STATUS_CODE_ABORTED = 11;
  SPAN_STATUS_CODE_OUT_OF_RANGE = 12;
  SPAN_STATUS_CODE_UNIMPLEMENTED = 13;
  SPAN_STATUS_CODE_INTERNAL = 14;
  SPAN_STATUS_CODE_UNAVAILABLE = 15;
  SPAN_STATUS_CODE_DATA_LOSS = 16;
  SPAN_STATUS_CODE_UNAUTHENTICATED = 17;
}

// Core message types
message EventSource {
  string service = 1;
  string version = 2;
  string instance = 3;
  string region = 4;
}

message TracingContext {
  string trace_id = 1;
  string span_id = 2;
  string parent_span_id = 3;
  int32 flags = 4;
  map<string, string> baggage = 5;
}

message EventMetadata {
  EventPriority priority = 1;
  repeated string tags = 2;
  Environment environment = 3;
  int32 retry_count = 4;
  string schema_url = 5;
  map<string, google.protobuf.Value> additional = 6;
}

message BaseEvent {
  string event_id = 1;
  string event_type = 2;
  string version = 3;
  google.protobuf.Timestamp timestamp = 4;
  string correlation_id = 5;
  string causation_id = 6;
  EventSource source = 7;
  TracingContext tracing = 8;
  EventMetadata metadata = 9;
}

// Log event specific messages
message LoggerInfo {
  string name = 1;
  string version = 2;
  string thread = 3;
}

message LogContext {
  string user_id = 1;
  string session_id = 2;
  string request_id = 3;
  string operation = 4;
  string component = 5;
  map<string, google.protobuf.Value> additional = 6;
}

message LogMetrics {
  double duration = 1;
  int64 memory_usage = 2;
  double cpu_usage = 3;
  map<string, google.protobuf.Value> additional = 4;
}

message StructuredLogData {
  map<string, google.protobuf.Value> fields = 1;
  LogMetrics metrics = 2;
}

message LogErrorInfo {
  string type = 1;
  string code = 2;
  string stack = 3;
  string cause = 4;
  string fingerprint = 5;
}

message LogSourceInfo {
  string file = 1;
  int32 line = 2;
  string function = 3;
  string class = 4;
}

message LogEventData {
  LogLevel level = 1;
  string message = 2;
  google.protobuf.Timestamp timestamp = 3;
  LoggerInfo logger = 4;
  LogContext context = 5;
  StructuredLogData structured = 6;
  LogErrorInfo error = 7;
  LogSourceInfo source = 8;
}

message LogEvent {
  BaseEvent base = 1;
  LogEventData data = 2;
}

// Metrics event specific messages
message MetricValue {
  oneof value {
    double number_value = 1;
    MetricAggregation aggregation_value = 2;
  }
}

message MetricAggregation {
  double sum = 1;
  int64 count = 2;
  double min = 3;
  double max = 4;
  double avg = 5;
  map<string, double> percentiles = 6;
}

message MetricBucket {
  double upper_bound = 1;
  int64 count = 2;
}

message MetricExemplar {
  double value = 1;
  google.protobuf.Timestamp timestamp = 2;
  string trace_id = 3;
  string span_id = 4;
  map<string, string> labels = 5;
}

message MetricsEventData {
  string name = 1;
  MetricType type = 2;
  MetricValue value = 3;
  string unit = 4;
  google.protobuf.Timestamp timestamp = 5;
  map<string, string> dimensions = 6;
  repeated MetricBucket buckets = 7;
  repeated MetricExemplar exemplars = 8;
}

message MetricsEvent {
  BaseEvent base = 1;
  MetricsEventData data = 2;
}

// Trace event specific messages
message SpanStatus {
  SpanStatusCode code = 1;
  string message = 2;
}

message SpanLog {
  google.protobuf.Timestamp timestamp = 1;
  map<string, google.protobuf.Value> fields = 2;
}

message SpanReference {
  enum ReferenceType {
    REFERENCE_TYPE_UNSPECIFIED = 0;
    REFERENCE_TYPE_CHILD_OF = 1;
    REFERENCE_TYPE_FOLLOWS_FROM = 2;
  }
  
  ReferenceType ref_type = 1;
  string trace_id = 2;
  string span_id = 3;
}

message ProcessInfo {
  string service_name = 1;
  map<string, string> tags = 2;
}

message TraceEventData {
  string trace_id = 1;
  string span_id = 2;
  string parent_span_id = 3;
  string operation_name = 4;
  google.protobuf.Timestamp start_time = 5;
  google.protobuf.Timestamp end_time = 6;
  int64 duration = 7;
  SpanStatus status = 8;
  SpanKind kind = 9;
  map<string, google.protobuf.Value> tags = 10;
  repeated SpanLog logs = 11;
  ProcessInfo process = 12;
  repeated SpanReference references = 13;
}

message TraceEvent {
  BaseEvent base = 1;
  TraceEventData data = 2;
}

// Generic event wrapper
message Event {
  oneof event {
    LogEvent log_event = 1;
    MetricsEvent metrics_event = 2;
    TraceEvent trace_event = 3;
  }
}

// Request/Response messages
message SubmitEventRequest {
  Event event = 1;
  map<string, string> headers = 2;
}

message SubmitEventResponse {
  bool success = 1;
  string event_id = 2;
  string message = 3;
  repeated ValidationError errors = 4;
  EventProcessingInfo processing_info = 5;
}

message SubmitEventBatchRequest {
  repeated Event events = 1;
  map<string, string> headers = 2;
  BatchOptions options = 3;
}

message SubmitEventBatchResponse {
  bool success = 1;
  int32 processed_count = 2;
  int32 failed_count = 3;
  repeated BatchEventResult results = 4;
  BatchProcessingInfo processing_info = 5;
}

message BatchOptions {
  bool fail_fast = 1;
  bool validate_all = 2;
  int32 max_retries = 3;
}

message BatchEventResult {
  int32 index = 1;
  bool success = 2;
  string event_id = 3;
  string message = 4;
  repeated ValidationError errors = 5;
}

message EventProcessingInfo {
  google.protobuf.Timestamp received_at = 1;
  google.protobuf.Timestamp processed_at = 2;
  int64 processing_time_ms = 3;
  string collector_instance = 4;
  string partition_key = 5;
}

message BatchProcessingInfo {
  google.protobuf.Timestamp received_at = 1;
  google.protobuf.Timestamp processed_at = 2;
  int64 total_processing_time_ms = 3;
  int64 average_processing_time_ms = 4;
  string collector_instance = 5;
}

message ValidationError {
  string field = 1;
  string message = 2;
  google.protobuf.Value value = 3;
  string code = 4;
}

// Health check messages
message HealthCheckRequest {
  string service = 1;
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;
  }
  
  ServingStatus status = 1;
  string message = 2;
  map<string, string> details = 3;
  google.protobuf.Timestamp timestamp = 4;
}

// Schema info messages
message GetSchemaInfoRequest {
  string schema_type = 1;
  string version = 2;
}

message GetSchemaInfoResponse {
  repeated SchemaVersion schemas = 1;
  SchemaVersion latest = 2;
  repeated CompatibilityInfo compatibility = 3;
}

message SchemaVersion {
  string schema_type = 1;
  string version = 2;
  string content = 3;
  google.protobuf.Timestamp created_at = 4;
  map<string, string> metadata = 5;
}

message CompatibilityInfo {
  string from_version = 1;
  string to_version = 2;
  bool compatible = 3;
  bool migration_available = 4;
  string migration_path = 5;
}

// Performance optimization messages
message CompressionOptions {
  enum CompressionType {
    COMPRESSION_TYPE_NONE = 0;
    COMPRESSION_TYPE_GZIP = 1;
    COMPRESSION_TYPE_SNAPPY = 2;
    COMPRESSION_TYPE_LZ4 = 3;
  }
  
  CompressionType type = 1;
  int32 level = 2;
}

message BatchingOptions {
  int32 max_batch_size = 1;
  int32 max_wait_time_ms = 2;
  int32 max_memory_usage_bytes = 3;
}

message RetryPolicy {
  int32 max_attempts = 1;
  int32 initial_backoff_ms = 2;
  int32 max_backoff_ms = 3;
  double backoff_multiplier = 4;
  repeated int32 retryable_status_codes = 5;
}

// Metrics and monitoring
message CollectorMetrics {
  int64 events_received = 1;
  int64 events_processed = 2;
  int64 events_failed = 3;
  int64 events_dropped = 4;
  double average_processing_time_ms = 5;
  double throughput_per_second = 6;
  map<string, int64> events_by_type = 7;
  map<string, int64> errors_by_type = 8;
  google.protobuf.Timestamp last_updated = 9;
} 